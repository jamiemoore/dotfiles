# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-sensible'
# # set -g @plugin 'christoomey/vim-tmux-navigator'
# set -g @plugin 'tmux-plugins/tmux-yank'
# set -g @plugin 'catppuccin/tmux#v2.1.3' 

# 24-bit colour support
# set-option -sa terminal-overrides ",xterm*:Tc"


# set -g @catppuccin_flavour 'mocha'

# remap the Command key
set -g prefix C-a
#unbind C-b
bind C-a send-prefix

# Set vi mode (default emacs)
setw -g mode-keys vi

# Set the text selection keys to be vi like
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send -X copy-selection

#Set the command history to use up and down arrows
#bind-key -t vi-edit Up   history-up
bind -T edit-mode-vi Up send -X history-up
#bind-key -t vi-edit Down history-down
bind -T edit-mode-vi Down send -X history-down

# enable the system clipboard
set -g set-clipboard on

#More History
# set -g history-limit 10000

# Bind m to send keystrokes to all windows
bind m setw synchronize-panes

# Renumber the tmux windows
bind ` move-window -r

# Swap windows (Not sure how to shortcut this one
# swap-window -s 3 -t 1

# Easy tmux config reload
bind r source-file ~/.config/tmux/tmux.conf \; display "reloading tmux config ..."

# Integration with system clipboard and primary selection

# to use ... C-[ then v and highlight area.  press y to yank to system clipboard

#bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
# Before I turned off set-clipboard, I used this:
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'pbcopy'

# C-c: save into system clipboard (+). With preselection.
#bind C-c choose-buffer "run \"tmux save-buffer -b %% - | xclip -i -sel clipboard\" \; run \" tmux display \\\"Clipboard \(+\) filled with: $(tmux save-buffer -b %1 - | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \\\" \" "
# C-v: copy from + clipboard.
#bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer" \; run "tmux display \"Copied from \(+\) $(xclip -o -sel clipboard | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \""

# C-d: save into selection clipboard (*). With preselection.
#bind C-d choose-buffer "run \"tmux save-buffer -b %% - | xclip -i\" \; run \" tmux display \\\"Clipboard \(*\) filled with: $(tmux save-buffer -b %1 - | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \\\" \" "
# C-f: copy from * clipboard.
#bind C-f run "tmux set-buffer \"$(xclip -o)\"; tmux paste-buffer" \; run "tmux display \"Copied from \(*\) $(xclip -o | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \""

# set 256 colour mode
# set -g default-terminal "screen-256color"
#set -g default-terminal "screen.xterm-r6"

#Unbind resize pane keys
unbind C-Up
unbind C-Down
unbind C-Left
unbind C-Right

# Tmux Colours
# set -g status-fg colour8
# set -g status-bg colour15

#set-option -g pane-border-fg colour15
#set-option -g pane-border-bg colour0

#set-option -g pane-active-border-fg colour15
#set-option -g pane-active-border-bg colour0

#Pane borders
set -g pane-border-status off
#set -g pane-border-status top
#set -g pane-border-format "#{pane_index} #T #{pane_current_command}"

#Coloured Panes
# bind M-0 select-pane -P 'bg=default'
# bind M-1 select-pane -P 'bg=red'
# bind M-2 select-pane -P 'bg=magenta'
# bind M-3 select-pane -P 'bg=blue'
# bind M-4 select-pane -P 'bg=cyan'

#

#set-option -g pane-border-bg black
#set-option -g pane-border-fg white
# set -g pane-active-border fg=white
# set -g pane-active-border bg=black

#
#set -g status-bg black
#set -g status-fg white

#nohup will now work under osx
#set-option -g default-command "reattach-to-user-namespace -l $SHELL"

# Automatically set window title
set-option -g status-interval 5
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{b:pane_current_path}'

# Mouse
set -g mouse on
# To copy text with mouse select the text and press y

# Open new panes and windows in cuurent directory
bind - split-window -v -c "#{pane_current_path}"
bind \\ split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# Start windows and panes at 1, not 0
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1

# Automatically rebumber windows
set-option -g renumber-windows on

# Colors (using terminal colors for auto-adaptation)
set -g status-style fg=default,bg=default

# set -g status-left "#[fg=colour0,bg=colour4,bold] #S #[fg=colour4,bg=colour0]"
set -g status-left " "
set -g status-right ""

# set-option -g status 2

# Window status format with rounded corners
setw -g window-status-current-format "#[fg=colour4,bg=#2d2d2d,bold]#[fg=#2d2d2d,bg=colour4,bold]#I #[fg=#2d2d2d,bg=colour7,bold] #W "
setw -g window-status-format "#[fg=colour5,bg=default,bold]#[fg=#2d2d2d,bg=colour5,bold]#I #[fg=#2d2d2d,bg=#cccccc,bold] #W "

# setw -g window-status-current-format "#[fg=colour4,bg=#2d2d2d,bold]#[fg=#2d2d2d,bg=colour4,bold]#I #[fg=#2d2d2d,bg=colour7,bold] #W#[fg=colour7,bg=default,bold]"
# setw -g window-status-format "#[fg=colour5,bg=default,bold]#[fg=#2d2d2d,bg=colour5,bold]#I #[fg=#2d2d2d,bg=#cccccc,bold] #W#[fg=default,bg=default,bold]"

# Window separator
setw -g window-status-separator " "

# Remove default clock and other info
set -g status-left-length 2
set -g status-right-length 0

# set-option -g status 1
set-option -g pane-border-status bottom
# set-option -g pane-border-format " "

set-option -g pane-active-border-style "fg=#2d2d2d"
set-option -g pane-border-style "fg=#2d2d2d"
# # Set 2-line status
# set-option -g status 2

# # First line: your actual status with windows
# set-option -g status-format[0] "#[align=left]#{session_name} #[align=centre]#{W:#[fg=colour5,bg=default,bold]#[fg=#2d2d2d,bg=colour5,bold]#I #[fg=#2d2d2d,bg=#cccccc,bold] #W#[fg=default,bg=default,bold],#[fg=colour4,bg=#2d2d2d,bold]#[fg=#2d2d2d,bg=colour4,bold]#I #[fg=#2d2d2d,bg=colour7,bold] #W#[fg=colour7,bg=default,bold]} #[align=right]%H:%M"

# # Second line: blank
# set-option -g status-format[1] ""

# set-option -g status 2
# set-option -g status-format[0] ""  
# set-option -g status-format[1] "#[align=centre]#{W:#{window_status_format},#{window_status_current_format}}"

# set-option -g status 2
# set-option -g status-format[0] ""  # blank line above
# set-option -g status-format[1] "#I #W your-status-content-here"


# Keep at the end of the file
# run '~/.tmux/plugins/tpm/tpm'
